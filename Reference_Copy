import hou

for n in hou.selectedNodes():
    new_n = n.parent().createNode(n.type().name(), '{0}_refCopy'.format(n.name()))
    new_n.setPosition(n.position())
    new_n.move((0.5,-0.5))

    new_n.setColor(hou.Color(0.3,0.2,0.5))

    group = new_n.parmTemplateGroup()

    help_text = 'Reference to the source selected nodes'

    source = hou.StringParmTemplate('ref_source', 'Reference Source', 1, string_type=hou.stringParmType.NodeReference, help = help_text)

    group.insertBefore((0,), source)
    new_n.setParmTemplateGroup(group)

    new_n.parm('ref_source').set(n.path())

    #link parms

    for p in new_n.parms():
        if p.name() == 'ref_source':
            continue
        if p.parmTemplate().type() == hou.parmTemplateType.Folder or p.parmTemplate().type() == hou.parmTemplateType.FolderSet:
            continue
        
        mode = kwargs['ctrlclick']
        
        if mode:
            #hscript
            expr = 'ch'
            if p.parmTemplate().type()== hou.parmTemplateType.String:
                expr = 'chs'
            p.setExpression("{0}(chs('ref_source') + '/{1}')".format(expr, p.name()))
        else:
            #Python
            p.setExpression("hou.node(hou.pwd().evalParm('ref_source')).evalParm('{0}')".format(p.name()), language=hou.exprLanguage.Python)
